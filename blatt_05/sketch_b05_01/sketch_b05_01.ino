#include <SPI.h>

//ASCII fontset
unsigned char font[95][6] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // space
  { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 }, // !
  { 0x00, 0x07, 0x00, 0x07, 0x00, 0x00 }, // "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 }, // #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 }, // $
  { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 }, // %
  { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 }, // &
  { 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 }, // '
  { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 }, // (
  { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 }, // )
  { 0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00 }, // *
  { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 }, // +
  { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 }, // ,
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // -
  { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 }, // .
  { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, // slash
  { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 }, // 0
  { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 }, // 1
  { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 }, // 2
  { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 }, // 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 }, // 4
  { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 }, // 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 }, // 6
  { 0x03, 0x71, 0x09, 0x05, 0x03, 0x00 }, // 7
  { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 }, // 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 }, // 9
  { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 }, // :
  { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 }, // ;
  { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 }, // <
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 }, // =
  { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 }, // >
  { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 }, // ?
  { 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 }, // @
  { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 }, // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 }, // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 }, // C
  { 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 }, // E
  { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 }, // F
  { 0x3E, 0x41, 0x41, 0x49, 0x7A, 0x00 }, // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 }, // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 }, // I
  { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 }, // J
  { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 }, // K
  { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 }, // L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00 }, // M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 }, // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // O
  { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 }, // P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 }, // Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 }, // R
  { 0x26, 0x49, 0x49, 0x49, 0x32, 0x00 }, // S
  { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 }, // T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 }, // U
  { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 }, // V
  { 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 }, // W
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 }, // X
  { 0x07, 0x08, 0x70, 0x08, 0x07, 0x00 }, // Y
  { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 }, // Z
  { 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00 }, // [
  { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 }, // backslash
  { 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00 }, // ]
  { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 }, // ^
  { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, // _
  { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 }, // `
  { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 }, // a
  { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 }, // b
  { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 }, // c
  { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 }, // d
  { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 }, // e
  { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 }, // f
  { 0x08, 0x54, 0x54, 0x54, 0x3C, 0x00 }, // g
  { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 }, // h
  { 0x00, 0x48, 0x7D, 0x40, 0x00, 0x00 }, // i
  { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 }, // j
  { 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 }, // k
  { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 }, // l
  { 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00 }, // m
  { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 }, // n
  { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 }, // o
  { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 }, // p
  { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 }, // q
  { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 }, // r
  { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 }, // s
  { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 }, // t
  { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 }, // u
  { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 }, // v
  { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 }, // w
  { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 }, // x
  { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 }, // y
  { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }, // z
  { 0x00, 0x08, 0x36, 0x41, 0x00, 0x00 }, // {
  { 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00 }, // |
  { 0x00, 0x41, 0x36, 0x08, 0x00, 0x00 }, // }
  { 0x10, 0x08, 0x08, 0x10, 0x08, 0x00 } // ~
};

//LCD Parameter
int slaveSelectPin = 10;
int rstPin = 6;
int ledPin = 2;
int dcPin = 5;
int clkDivider = 84;

//LCD Buffer to transmit
byte pixBuffer[6][84];

int testValue=0;

void setup() 
{
  pinMode(rstPin, OUTPUT);
  digitalWrite(rstPin, LOW);
  delay(500);
  digitalWrite(rstPin, HIGH);
  
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, HIGH);
  
  pinMode(dcPin, OUTPUT);
  
  Serial.begin(9600);
  
  SPI.begin(slaveSelectPin);
  SPI.setClockDivider(slaveSelectPin, clkDivider);
  
  digitalWrite(dcPin, LOW);
  SPI.transfer(slaveSelectPin, 0x21);
  SPI.transfer(slaveSelectPin, 0x14);
  SPI.transfer(slaveSelectPin, 0xB0);
  SPI.transfer(slaveSelectPin, 0x20);
  SPI.transfer(slaveSelectPin, 0x0C);
  digitalWrite(dcPin, HIGH);
  
  setWhite();
}

void loop() 
{
  //Test513();  
  
  /*int printAt = 1;
  if(printAt == 1)
  {
    Test52();
    !printAt;
  }*/
  
  Test53();
}

void Test513()
{
  int error=0;
  if(testValue == 0)
      testValue = 1;
  else
    testValue = 0;
  
  Serial.print("Setting display RowWise: ");
  Serial.println(testValue);
  
  for(int x=0; x<84; x++)
  {
    for(int y=0; y<48; y++)
    {
      error = error + setPixel(x,y,testValue);
    }
    transferBuffer();
    delay(20);
  }
  Serial.print("Test caused ");
  Serial.print(error);
  Serial.println(" Error(s)!");
  
}

void Test52()
{
  int error = setChar(39, 20, 32);
}

void Test53()
{
  int error = 0;
  error = error + setChar(33, 12, 42); // J
  error = error + setChar(39, 12, 33); // A
  error = error + setChar(45, 12, 46); // N
  
  error = error + setChar(24, 20, 34); // B
  error = error + setChar(30, 20, 50); // R
  error = error + setChar(36, 20, 41); // I
  error = error + setChar(42, 20, 37); // E
  error = error + setChar(48, 20, 51); // S
  error = error + setChar(54, 20, 37); // E
  
  error = error + setChar(21, 28, 22); // 6
  error = error + setChar(27, 28, 21); // 5
  error = error + setChar(33, 28, 18); // 2
  error = error + setChar(39, 28, 19); // 3
  error = error + setChar(45, 28, 20); // 4
  error = error + setChar(51, 28, 16); // 0
  error = error + setChar(57, 28, 24); // 8
  
  delay(5000);
  setWhite();
  
  error = error + setChar(30, 12, 45);	//M
  error = error + setChar(36, 12, 65);	//a
  error = error + setChar(42, 12, 82);	//r	
  error = error + setChar(48, 12, 67);	//c
  
  error = error + setChar(12, 20, 51);	//S
  error = error + setChar(18, 20, 84);	//t
  error = error + setChar(24, 20, 82);	//r
  error = error + setChar(30, 20, 79);	//o
  error = error + setChar(36, 20, 84);	//t
  error = error + setChar(42, 20, 72);	//h
  error = error + setChar(48, 20, 77);	//m
  error = error + setChar(54, 20, 65);	//a
  error = error + setChar(60, 20, 78);	//n
  error = error + setChar(66, 20, 78);	//n
  
  error = error + setChar(21, 28, 22);	//6
  error = error + setChar(27, 28, 21);	//5
  error = error + setChar(33, 28, 19);	//3
  error = error + setChar(39, 28, 23);	//7
  error = error + setChar(45, 28, 22);	//6
  error = error + setChar(51, 28, 20);	//4
  error = error + setChar(57, 28, 22);	//6
  
  Serial.print("Test caused ");
  Serial.print(error);
  Serial.println(" Error(s)!");

  delay(5000);
  setWhite();
}  
  
int setPixel(int x, int y, int value)
{
  if(x > 83 || x < 0 || y > 47 || y < 0)
    return 1;                           //index out of range Error
  
  int yBank = (y/8);
  int yBit = y % 8;
  
  pixBuffer[yBank][x] ^= (-value ^ pixBuffer[yBank][x]) & (1 << yBit); 
  
  return 0;                             //Well done
}

int setChar(int x, int y, int asciiChar)
{
  int error;
  if(x > 77 || x < 0 || y > 39 || y < 0)
    return 1;                           //index out of range Error
  
  byte tmpRow;
  int tmpBit;
  
  for(int xOff=0; xOff<6; xOff++)
  {
    tmpRow = font[asciiChar][xOff];
    for(int yOff=0; yOff<8; yOff++)
    {
      tmpBit = (tmpRow>>yOff)&1;
      error = setPixel(x+xOff, y+yOff, tmpBit);
    }
  }
  transferBuffer();
  
  return error;
}

void setWhite()
{
  resetBuffer();
  transferBuffer();
}

void resetBuffer()
{
  for(int n=0;n<6;n++)
  {
    for(int m=0;m<84;m++)
    {
      pixBuffer[n][m] = 0x00;
    }
  }
}
void transferBuffer()
{
  //go to first RAM Adress (y=0, x=0)
  digitalWrite(dcPin, LOW);
  SPI.transfer(slaveSelectPin, 0x40);
  SPI.transfer(slaveSelectPin, 0x80);
  //write Buffer to Display
  digitalWrite(dcPin, HIGH);
  for(int n=0;n<6;n++)
  {
    for(int m=0;m<84;m++)
    {
      SPI.transfer(slaveSelectPin, pixBuffer[n][m]);
    }
  }
}
